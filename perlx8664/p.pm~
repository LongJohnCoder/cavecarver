#!/usr/bin/perl
package modrm;
sub new {
    my ($c,$g,$n,$s_) = @_;
    bless $s,$c;
}

package modrm::imm;
@ISA = ('modrm');
sub new {  my ($c,$val) = @_; my $s = {'val'=>$val};  bless $s,$c; return $s; }

package modrm::mem;
@ISA = ('modrm');
sub new {  my ($c,$reg,$val) = @_; $val=0 if (!defined($val)); my $s = {'reg'=>$reg,'val'=>$val};  bless $s,$c; return $s; }

package modrm::reg;
@ISA = ('modrm');
sub new {  my ($c,$reg) = @_; my $s = {'reg'=>$reg};  bless $s,$c; return $s; }

##define RM_AX 1    /* AL, AH, AX, EAX, RAX */
#define RM_CX 2     /* CL, CH, CX, ECX, RCX */
#define RM_DX 4     /* DL, DH, DX, EDX, RDX */
#define RM_BX 8     /* BL, BH, BX, EBX, RBX */
#define RM_SP 0x10  /* SPL, SP, ESP, RSP */
#define RM_BP 0x20  /* BPL, BP, EBP, RBP */
#define RM_SI 0x40  /* SIL, SI, ESI, RSI */
#define RM_DI 0x80  /* DIL, DI, EDI, RDI */
#define RM_FPU 0x100 /* ST(0) - ST(7) */
#define RM_MMX 0x200 /* MM0 - MM7 */
#define RM_SSE 0x400 /* XMM0 - XMM15 */
#define RM_AVX 0x800 /* YMM0 - YMM15 */
#define RM_CR 0x1000 /* CR0, CR2, CR3, CR4, CR8 */
#define RM_DR 0x2000 /* DR0, DR1, DR2, DR3, DR6, DR7 */
#define RM_R8 0x4000 /* R8B, R8W, R8D, R8 */
#define RM_R9 0x8000 /* R9B, R9W, R9D, R9 */
#define RM_R10 0x10000 /* R10B, R10W, R10D, R10 */
#define RM_R11 0x20000 /* R11B, R11W, R11D, R11 */
#define RM_R12 0x40000 /* R12B, R12W, R12D, R12 */
#define RM_R13 0x80000 /* R13B, R13W, R13D, R13 */
#define RM_R14 0x100000 /* R14B, R14W, R14D, R14 */
#define RM_R15 0x200000 /* R15B, R15W, R15D, R15 */

package modrm;
sub getops {
    my ($op) = @_;
    my @a = (); my $op;
    while (length($op)) {
	if ($pre =~ /^\$0x([a-f0-9]+)/) {
	    # imm hex
	    my ($val) = (hex($1));
	    push(@a, $op = new modrm::imm($val));
	}
	elsif ($pre =~ /^\$([a-f0-9]+)/) {
	    # imm
	    my ($val) = (int($1));
	    push(@a, $op = new modrm::imm($val));
	}
	elsif ($pre =~ /^((?:-?0x[a-f0-9]+)?)\(\%(r.{1,2})\)/) {
	    # register indiret, optional offset
	    my ($val,$reg) = (hex($1),$2);
	    push(@a, $op = new modrm::mem($reg, $val));
	}
	elsif ($pre =~ /^\%r.{1,2}/) {
	    # reg
	    my ($reg) = ($1);
	    push(@a, $op = new modrm::reg($reg));
	}
	else  {
	    croak("Cannot decode '$op'\n");
	}
    }
    return @a;
}

package insn;

sub staticanalyze {
    my ($insn) = @_;
    @parts = split("\s+",$insn);
    my $pre = $parts[0];
    if ($pre =~ /^lea\s+/)
    {
	my ($src,$dst) = getops($parts[1]);
    }
    elsif ($pre =~ /^xchg\s+/)
    {
	my ($src,$dst) = getops($parts[1]);
    }
    elsif ($pre =~ /^mov\s+/)
    {
	my ($src,$dst) = getops($parts[1]);
    }
    elsif ($pre =~ /^cmov.*\s+/)
    {
	my ($src,$dst) = getops($parts[1]);
    }
    elsif ($pre =~ /^jmpq\s+\*/)
    {
	my ($dst) = getops($parts[1]);
    }
    elsif ($pre =~ /^jmpq\s+/)
    {
	my ($dst) = getops($parts[1]);
    }
    elsif ($pre =~ /^retq\s+/)
    {
    }
    elsif ($pre =~ /^sub/)
    {
	my ($src,$dst) = getops($parts[1]);
    }
    elsif ($pre =~ /^add/)
    {
	my ($src,$dst) = getops($parts[1]);
    }
    elsif ($lea =~ /^lea/)
    {
	my ($src,$dst) = getops($parts[1]);
    }
}

sub scan_ar {
    my ($a,$f,$m) = (@_);
    my $last = undef;
    foreach $m (@$m) {
	my $found = 0;
	if ($m =~ /^\s*$/ms) {
	} elsif ($m =~ /file format elf64/) {
	} elsif ($m =~ /\.\.\.$/) {
	} elsif ($m =~ /^Disassembly of section (.*)/) {
	} elsif ($m =~ /^0*([0-9a-f]+) \<(.*)\>:$/s) {
	    my ($addr,$fn) = ($1,$2);
	    $f{$fn} = $addr;
	} elsif ($m =~ /^\s*([0-9a-f]+)\:\s*((?:[0-9a-f]{2} )+)\s*$/) {
	    my ($addr,$bytes) = ($1,$2);
	    croak("Last address mismatch\n") if (!defined($$a{$last}));
	    $$a{$last}{'data'} = $$a{$last}{'data'}.$bytes;
	} elsif ($m =~ /^\s*([0-9a-f]+)\:\s*((?:[0-9a-f]{2} )+)\s*/) {
	    my ($addr,$bytes,$insn) = (hex($1),$2,$');
	    $$a{$addr} = {'addr'=>$addr, 'data'=>$bytes, 'insn'=>$insn};
	    $found = 1; $last = $addr;
	} else {
	    print ("Cannot decode '$m' $j\n");
	    exit(1);
	}
	$last = undef if (!$found);
	$j++;
    }
}

sub cont_at {
    my ($a,$f,$addr) = @_;
    if (!defined($$a{$addr})) {
	my $a = $addr;
	my $e = $a + 0x10000;
	my $cmd = sprintf("objdump -C -S %s --start-address=0x%x --stop-address=0x%x",$fname,$a,$e);
	my @ar = `$cmd`;
	@ar = map { $_ =~ s/\n$//; $_ } @ar;
	scan_ar($a,$f,\@ar);
	print($cmd."\n");
    }
    if (!defined($$a{$addr})) {
	croak("Error: cannot resolve $addr: $$a{$addr}\n");
	exit(1);
    }
    return $$a{$addr};
}

1;

use Getopt::Long;
use File::Basename;
use File::Path;
use FindBin qw($Bin);
use Cwd;
use Data::Dumper;
use Carp;
